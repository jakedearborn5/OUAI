Answer questions marked as "QS"

QS1.1:
Depth-First Search (DFS) uses a stack because it follows a Last-In-First-Out (LIFO) order, allowing the algorithm to explore the most recent (deepest) node first. This enables DFS to dive deep into one branch before backtracking, making the stack a natural choice for managing the nodes to be explored.

QS1.2:
In DFS, the exploration order may seem scattered, as the algorithm dives deep into one branch before backtracking, creating a mix of early (bright red) and late explorations. Pacman does not visit all explored squares on the way to the goal; many are dead ends explored during the search but ignored in the final solution path. This is typical of DFS.

QS2.1:
BFS uses a queue because it follows a First-In-First-Out (FIFO) order, exploring all nodes at the current depth before moving deeper. This ensures systematic exploration and guarantees the shortest path (fewest actions) when all actions have the same cost.

QS3.1:
By utilizing the getCostOfActions((list of actions + next action)) function, the Priority Queue is informed about the cost of each action and systematically checks all same-cost states before incrementing the priority and exploring the next queue set.

QS4.1:
The Manhattan is better at directing the Agent to a corner because it is providing non-trivial and admissable data to the agent, which is shown by fewer expanded nodes. However the null heuristic is also optimal, but A* without a non-trivial heuristic devolves into a UCS.

QS4.2:
In openMaze, more of what I just explained is observable.

QS5.1:
In the CornersProblem, the state is represented as a tuple consisting of two components: Pac-Man's current position, stored as a tuple (x, y), and a tuple of visited corners, which tracks the corners Pac-Man has already visited. This representation is efficient and compact, allowing easy tracking of Pac-Man's progress while ensuring that the necessary information for the search algorithm is stored immutably. The state evolves as Pac-Man moves and visits new corners, providing a clear path to solving the problem.

QS5.2:
The CornersProblem involves finding a path that visits all four corners of the maze. The state is a tuple of Pac-Man's position and the visited corners. The getSuccessors method explores valid moves, updating visited corners, and isGoalState checks if all corners have been visited. The problem is solved using a search algorithm to find the optimal path.

QS6.1:


QS7.1:
